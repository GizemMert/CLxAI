# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_GkyDOki9D0kxqQ5WgL_yYVDZ9R7437t
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')

# %cd /content/drive/MyDrive/ #set you directory of choice

import torch
import torchvision.datasets as dset
import torchvision.transforms as transforms
import numpy as np
import os

#DATA LOADERS FOR ORGAN AND BLOOD DATASETS OF MEDMNIST COLLECTION. VISIT: https://medmnist.com/ FOR MORE.

# !pip install medmnist
from medmnist import OrganAMNIST, BloodMNIST #IMPORT THE DATASETS FO YOUR CHOICE

def to_rgb(image):
    if image.shape[0] == 1:
        image = image.repeat(3, 1, 1)
    return image

class Dataset():
    def __init__(self, batch_size=256, test_batch_size=8, val_split=0.3, name='B', as_rgb=False, image_size=None, dir="./"):
        trans = transforms.Compose([
            transforms.Resize(224),  # Resize to 224x224
            transforms.ToTensor(),
            transforms.Lambda(to_rgb),
            transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])  # Normalize to range [-1, 1]
        ])

        # CREATE DIRECTORIES TO STORE DATA
        self.dir = dir
        if not os.path.isdir(self.dir+'/data_train'):
            os.makedirs(self.dir+'/data_train')
        if not os.path.isdir(self.dir+'/data_val'):
            os.makedirs(self.dir+'/data_val')
        if not os.path.isdir(self.dir+'/data_test'):
            os.makedirs(self.dir+'/data_test')

        #PARAMS
        self.size = image_size
        self.as_rgb = as_rgb
        if self.as_rgb:
            self.num_channels = 3
        else:
            self.num_channels = 1
        self.name = name

        #DOWNLOAD DATASETS
        if self.name == 'O':
            train_set = OrganAMNIST(root="./data_train", split="train", transform=trans, download=True, size=self.size)
            print(train_set) #print info on the training set
            val_set = OrganAMNIST(root="./data_val", split="val", transform=trans, download=True, size=self.size)
            test_set = OrganAMNIST(root="./data_test", split="test", transform=trans, download=True, size=self.size)
        elif self.name == 'B':
            train_set = BloodMNIST(root="./data_train", split="train", transform=trans, download=True, size=self.size, as_rgb=self.as_rgb)
            print(train_set) #print info on the training set
            val_set = BloodMNIST(root="./data_val", split="val", transform=trans, download=True, size=self.size, as_rgb=self.as_rgb)
            test_set = BloodMNIST(root="./data_test", split="test", transform=trans, download=True, size=self.size, as_rgb=self.as_rgb)
        #ADD HERE OTHER DATASETS YOU ARE INTERESTED IN
        else:
            raise ValueError("Unknown Dataset")

        #DATA-LOADERS
        self.train_loader = torch.utils.data.DataLoader(
            dataset=train_set,
            batch_size=batch_size,
            shuffle=True,
            drop_last=True)
        self.val_loader = torch.utils.data.DataLoader(
            dataset=val_set,
            batch_size=batch_size,
            shuffle=False)
        self.test_loader = torch.utils.data.DataLoader(
            dataset=test_set,
            batch_size=test_batch_size,
            shuffle=False)

        #SOME INFO
        if self.name == 'O':
            self.num_classes = 10
        else:
            self.num_classes = 8  #adjust according to your dataset (organs and blood have 10 and 8 classes respectively)
        if self.as_rgb:
            self.data_dims = [self.size, self.size, 3]
        else:
            self.data_dims = [self.size, self.size, 1]
        self.train_size = len(self.train_loader)
        self.val_size = len(self.val_loader)
        self.test_size = len(self.test_loader)
        self.range = [0.0, 1.0]
        self.batch_size = batch_size
        self.num_training_instances = len(train_set)
        self.num_val_instances = len(val_set)
        self.num_test_instances = len(self.test_loader)

    #ITERATORS FOR TRAIN, VAL AND TEST
    def next_batch(self):
        for x, y in self.train_loader:
            if self.as_rgb:
                x = x.permute(0, 2, 3, 1).numpy()
            else:
                x = np.reshape(x, (-1, self.size, self.size, 1))
            y = y.squeeze()
            y_one_hot = np.eye(self.num_classes)[y]

            yield x, y_one_hot

    def next_val_batch(self):
        for x, y in self.val_loader:
            if self.as_rgb:
                x = x.permute(0, 2, 3, 1).numpy()
            else:
                x = np.reshape(x, (-1, self.size, self.size, 1))
            y = y.squeeze()
            y_one_hot = np.eye(self.num_classes)[y]

            yield x, y_one_hot

    def next_test_batch(self):
        for x, y in self.test_loader:
            if self.as_rgb:
                x = x.permute(0, 2, 3, 1).numpy()
            else:
                x = np.reshape(x, (-1, self.size, self.size, 1))
            y = y.squeeze()
            y_one_hot = np.eye(self.num_classes)[y]

            yield x, y_one_hot
